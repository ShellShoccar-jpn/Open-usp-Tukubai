#!/bin/sh

######################################################################
#
# KETA - Justify All Fields
#
# USAGE: keta n1 n2 .. <filename>
#        keta -v <filename>
#        keta [--] <filename>
#
#        <filename> .. Textfile you want to do it. The file must have
#                      whitespace-separated fields.
#        n* .......... Set witdh of the field forcely. (Normally, all
#                      the widths will be automatically set as much as
#                      needed)
#                      * The first n (n1) is for the width for the first
#                        field. n2 is for the second one.
#                      * Positive value means right-justified, which is
#                        useful for numbers.
#                      * Negative value means left-justified, which is
#                        useful for strings.
#                      * If the width you set is shorter than the real
#                        one, the real width will be set for only the
#                        field temporarily.
#        -v .......... Print the maximum width of each field of all lines.
#        -- .......... Left-justified mode. (All the widths will be
#                      automatically set as much as needed)
#
# Designed originally by Nobuaki Tounaka
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2020-12-06
#
# This is a public-domain software (CC0). It means that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, we are fed up with the side effects which are brought
# about by the major licenses.
#
######################################################################


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0022
export LC_ALL=C
export PATH="$(command -p getconf PATH 2>/dev/null)${PATH+:}${PATH-}"
case $PATH in :*) PATH=${PATH#?};; esac
export UNIX_STD=2003  # to make HP-UX conform to POSIX

# === Define the functions for printing usage and error message ======
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage   : ${0##*/} n1 n2 .. <filename>
	        : ${0##*/} -v <filename>
	        : ${0##*/} [--] <filename>
	Args    : <filename> .. Textfile you want to do it. The file must have
	                        whitespace-separated fields.
	Options : n* .......... Set witdh of the field forcely. (Normally, all
	                        the widths will be automatically set as much as
	                        needed)
	                        * The first n (n1) is for the width for the first
	                          field. n2 is for the second one.
	                        * Positive value means right-justified, which is
	                          useful for numbers.
	                        * Negative value means left-justified, which is
	                          useful for strings.
	                        * If the width you set is shorter than the real
	                          one, the real width will be set for only the
	                          field temporarily.
	          -v .......... Print the maximum width of each field of all lines.
	          -- .......... Left-justified mode. (All the widths will be
	                        automatically set as much as needed)
	Version : 2020-12-06 03:13:19 JST
	        : Open usp Tukubai (POSIX.1 Bourne Shell/POSIX.1 commands/UTF-8)
	USAGE
  exit 1
}
error_exit() {
  ${2+:} false && echo "${0##*/}: $2" 1>&2
  exit $1
}

# === Define an exit trap function for delete temporary files ========
exit_trap() {
  set -- ${1:-} $?  # $? is set as $1 if no argument given
  trap '' EXIT HUP INT QUIT PIPE ALRM TERM
  [ -f "${Tmpfile:-}" ] && rm -rf "${Tmpfile%/*}/_${Tmpfile##*/_}"
  trap -  EXIT HUP INT QUIT PIPE ALRM TERM
  exit $1
}

# === Define the function for the alternative of the "mktemp -t" =====
mktempf0() {
  # --- parameters, etc. ---------------------------------------------
  num_of_digits=16  # Length of Random String
  n=10              # Max Times of Retrying
  chrs='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_'
                    # Available letters
  LF=$(printf '\\\n_');LF=${LF%_}
  # --- call built-in mktemp if exists -------------------------------
  type mktemp >/dev/null 2>&1 && {
    mktemp -t _${0##*/}.$$.XXXXXXXXXXXXXXXX
    return $?
  }
  # --- set the temporary directory ----------------------------------
  Dir_tmp=$(set | grep -q ^TMPDIR= | sed 's/^[^=]\{1,\}=//');
  case "$Dir_tmp" in
    '') Dir_tmp='/tmp'      ;;
    /)  Dir_tmp=''          ;;
    *)  Dir_tmp=${Dir_tmp%/};;
  esac
  # --- mktemp loop --------------------------------------------------
  while [ $n -ge 0 ]; do
    # --- Generate Ramdom string -------------------------------------
    # calculate the number of words which required
    nw=$(echo "${num_of_digits}*l(${#chrs})/11.09+1" | # 11.09=ln(65536)
         bc -l                                       |
         sed 's/\..*$//'                             )
    # make a random hexadecimal digit
    if [ -c /dev/urandom ]; then
      hstr=$(dd if=/dev/urandom bs=2 count=$nw 2>/dev/null |
             od -A n -t x2 -v                              |
             tr 'abcdef ' 'ABCDEF\n'                       |
             tr -Cd 0123456789ABCDEF                       )
    else
      hstr=$( (ps -Ao pid,etime,pcpu,vsz; date)         |
             od -t d4 -A n -v                           |
             sed 's/[^0-9]\{1,\}/'"$LF"'/g'             |
             grep '[0-9]'                               |
             tail -n 42                                 |
             sed 's/.*\(.\{8\}\)$/\1/g'                 |
             awk 'BEGIN{a=-2147483648;}                 #
                       {a+=$1;        }                 #
                  END  {                                #
                    srand(a);                           #
                    for(i=0;i<'$nw';i++){               #
                      printf("%02X",int(rand()*65536)); #
                    }                                   #
                  }'                                    )
    fi
    # make a random string from the hexadecimal digit
    s=$(echo "obase=${#chrs};ibase=16;$hstr"                     |
        bc                                                       |
        tr -d '\\\n'                                             |
        tr ' ' '\n'                                              |
        awk 'BEGIN  {for(i=1;i<'$num_of_digits';i++){print 0;}}  #
             /[0-9]/{print;                                   }' |
        awk 'BEGIN  {ORS="";                                     #
                     s="'"$chrs"'";                              #
                     for(i=0;i<length(s);i++){                   #
                       c[i]=substr(s,i+1,1);                     #
                     }                        }                  #
             /[0-9]/{print c[$0*1];           }'                 |
        tail -c $num_of_digits                                   )
    # --- Making the file path ---------------------------------------
    Path_target="${Dir_tmp}/tmp.${0##*/}.$$.$s"
    # --- Making the file --------------------------------------------
    (set -C; umask 177; : > "$Path_target") 2>/dev/null || {
      [ -f "$Path_target" ] && { n=$((n-1)); continue; }
      n=-1; break;
    }
    break
  done
  # --- print error message when failed to make a file ---------------
  case "$n" in -1) return 1;; esac
  # --- print the path of the file -----------------------------------
  printf '%s\n' "$Path_target"
  # --- return successfully ------------------------------------------
  return 0
}

# === Check whether the AWK on this host supports array-length() or not
case "$(awk 'BEGIN{a[3]=3;a[4]=4;print length(a)}' 2>/dev/null)" in
  2) arlen='length';;
  *) arlen='arlen' ;; # use an equivalent original function if not supported
esac


######################################################################
# Parse Arguments
######################################################################

# === Get the options and the filepath ===============================
# --- initialize option parameters -----------------------------------
widths=''
left_justification=0
verbose=0
readonce=0
file=''
Tmpfile=''
mode=0 # 0 ... count the max-widths of all fields & auto-right-justification
       # 1 ... right-justification with the specified widths
       # 2 ... count the max-widths of all fields & auto-left-justification
       # 3 ... count the max-widths of all fields & print them
#
# --- get them -------------------------------------------------------
case "${1:-}" in
  --)
    left_justification=1
    mode=2
    shift
    lastarg=${1:-}
    ;;
  -v)
    verbose=1
    mode=3
    shift
    lastarg=${1:-}
    ;;
esac
if [ $mode -eq 0 ]; then
  while [ $# -gt 0 ]; do
    test=$(printf '%s\n' "$1" | grep -E '^-?[0-9]+(x([0-9]+|NF(-[0-9]+)?))?$')
    if [ -n "$test" ]; then
      mode=1
      widths="$widths ${test#_}"
      shift
    else
      break
    fi
  done
  widths=${widths# }
fi
if   [ $# -gt 1 ]                                                 ; then
  print_usage_and_exit
elif [ -z "${1:-}" ]                                              ; then
  file='-'
elif [ -f "$1" ] || [ -c "$1" ] || [ -p "$1" ] || [ "_$1" = '_-' ]; then
  file="$1"
else
  print_usage_and_exit
fi
[ -r "$file" ] || [ "_$file" = '_-' ] || error_exit 1 'Cannot open the file'


######################################################################
# Prepare
######################################################################

# === Create a temporary file if the file is the stdin and mode==0|2 =
if   [ "_$file" = '_-'               ] ||
     [ "_$file" = '_/dev/stdin'      ] ||
     [ "_$file" = '_/dev/fd/0'       ] ||
     [ "_$file" = '_/proc/self/fd/0' ]  ; then
  readonce=1
elif [ -c "$file" ] || [ -p "$file" ]   ; then
  readonce=2
fi
case "$file" in ''|-|/*|./*|../*) :;; *) file="./$file";; esac
if [ $readonce -ne 0 ] && ([ $mode -eq 0 ] || [ $mode -eq 2 ]); then
  trap 'exit_trap' EXIT HUP INT QUIT PIPE ALRM TERM
  Tmpfile=$(mktempf0) || error_exit 1 'Cannot create a temporary file'
  case $readonce in
    1) cat         > "$Tmpfile";;
    2) cat "$file" > "$Tmpfile";;
  esac
  file=$Tmpfile
fi


# === awkcode : get the length of the UTF-8 string (it is not a byte number)
awkcode_func_utf8strlen='
# strlen for UTF-8 (main)
function utf8strlen(str, len,i,l1,l2,l3) {
  len = 0;
  for (i = 1; i <= length(str); i++) {
    len++;
    l1=substr(str, i, 1);
    if        (l1 =="\010") {len-=2;continue;
    } else if (l1 < "\200") {       continue;
    } else if (l1 < "\300") {len--; continue;
    } else if (l1 < "\340") {i++;
    } else if (l1 < "\360") {
      if (l1 == "\357") {
        l2 = substr(str, i+1, 1);
        if (l2 == "\275") {
          l3 = substr(str, i+2, 1);
          if ((l3 >= "\240") && (l3 < "\300")) {len--;}
        } else if (l2 == "\276") {
          l3 = substr(str, i+2, 1);
          if ((l3 >= "\200") && (l3 < "\240")) {len--;}
        }
      }
      i += 2;
    } else if (l1 < "\370") {i += 3;
    } else if (l1 < "\374") {i += 4;
    } else if (l1 < "\376") {i += 5;
    } else                  {len-- ; continue;}
    len++;
  }
  return len;
}
'


# === count the max-widths of the fields =============================
if [ $mode -eq 0 ] || [ $mode -eq 2 ] || [ $mode -eq 3 ]; then

awkcode_main_width_counter='
BEGIN {
  max_nf = 0;
}

{
  if (NF >= max_nf) {
    for (i = 1; i <= max_nf; i++) {
      width = utf8strlen($i);
      if (width > max_width[i]) {
        max_width[i] = width;
      }
    }
    for (i = max_nf + 1; i <= NF; i++) {
      width = utf8strlen($i);
      max_width[i] = width;
    }
    max_nf = NF;
  } else {
    for (i = 1; i <= NF; i++) {
      width = utf8strlen($i);
      if (width > max_width[i]) {
        max_width[i] = width;
      }
    }
  }
}

END {
  widths = "";
  for (i = 1; i <= max_nf; i++) {
    widths = widths max_width[i] FS;
  }
  print substr(widths, 1, length(widths) - 1);
}
'
widths=$(awk "$awkcode_main_width_counter$awkcode_func_utf8strlen" "$file")

fi


# === print the max-widths and exit normally when mode=3("-v" option)
if [ $mode -eq 3 ]; then
  echo "$widths"
  exit 0
fi


# === *(-1) all the width numbers for left-justification when mode=2("--" opt.)
if [ $mode -eq 2 ]; then
  widths=$(echo "$widths" | sed 's/\([0-9]\{1,\}\)/-\1/g')
fi


######################################################################
# Main Routine
######################################################################

if [ $mode -eq 0 ] || [ $mode -eq 1 ] || [ $mode -eq 2 ]; then

awkcode_main_justificator='
# the alternative length function for array variable
function arlen(ar,i,l){for(i in ar){l++;}return l;}

BEGIN {
  split(widths_str, width_str);
  varriable_widths = (match(widths_str, /NF/)) ? 1 : 0;
  if (!varriable_widths) {
    decide_widths();
  }
  last_nf = 0;
}

{
  # re-decide width numbers when the number of the NF has changed
  if (varriable_widths && (NF != last_nf)) {
    decide_widths();
    last_nf = NF;
  }
  # justificate the fields and concatinate them
  line = "";
  for (i = 1; i <= NF; i++) {
    size = utf8strlen($i);
    if ((i in width) && (width[i] > size)) {
      # right-justification
      padding = "";
      if (width[i] - size > 0) {
        padding = sprintf("%0" (width[i] - size) "d", 0);
        gsub("0", " ", padding);
      }
      line = line padding $i FS;
    } else if ((i in width) && (-width[i] > size)) {
      # left-justification
      padding = "";
      if (-width[i] - size > 0) {
        padding = sprintf("%0" (-width[i] - size) "d", 0);
        gsub("0", " ", padding);
      }
      line = line $i padding FS;
    } else {
      # non-justification
      line = line $i FS;
    }
  }
  print substr(line, 1, length(line)-length(FS));
}

function decide_widths(   mode,i,j,k,n,s) {
  split("", width);
  j = 0;
  for (i = 1; i <= '$arlen'(width_str); i++) {
    if (match(width_str[i], /^-?[0-9]+$/)) {
      j++;
      width[j] = width_str[i];
      continue;
    }
    if (match(width_str[i], /^-?[0-9]+x[0-9]+$/)) {
      mode = 1;
    } else if (match(width_str[i], /^-?[0-9]+xNF$/)) {
      mode = 2;
    } else if (match(width_str[i], /^-?[0-9]+xNF-[0-9]+$/)) {
      mode = 3;
    } else {
      continue;
    }
    match(width_str[i], /^-?[0-9]+/);
    s = substr(width_str[i], RSTART, RLENGTH);
    if (mode == 1) {
      match(width_str[i], /[0-9]+$/);
      n = substr(width_str[i], RSTART, RLENGTH) + 0;
      for (k = 0; k < n; k++) {
        j++;
        width[j] = s;
      }
    } else if (mode == 2) {
      n = NF;
      for (k = 0; k < n; k++) {
        j++;
        width[j] = s;
      }
    } else if (mode == 3) {
      match(width_str[i], /[0-9]+$/);
      n = NF - substr(width_str[i], RSTART, RLENGTH);
      for (k = 0; k < n; k++) {
        j++;
        width[j] = s;
      }
    }
  }
}
'
if [ -z "$Tmpfile" ]; then
  exec awk -v "widths_str=$widths"                                       \
              "$awkcode_main_justificator$awkcode_func_utf8strlen" "$file"
else
# (commands should not be run with "exec" because of having to remove tempfile)
       awk -v "widths_str=$widths"                                       \
              "$awkcode_main_justificator$awkcode_func_utf8strlen" "$file"
fi

fi
