#!/bin/sh

######################################################################
#
# UP3 - Merge A Transaction Data Into A Master One While Keeping The
#       Order Of The Key Fields
#
# USAGE: up3 key=<key> <master> <tran>
#
#        key ..... Keyfield number(s) by <key> which must be kept the
#                  Order even after merging
#                  * You can also use "@" and "/" characters to mean
#                    multiplicate keys.
#                    - "2@4@5" means "2nd, 4th and 5th fields should
#                      be refferred as the keys"
#                    - "2/5" means "Fields from 2nd to 5th should be
#                      refferred as the keys"
#                  * You can also use "N" or "n" character after a
#                    key number to mean numeric order mode.
#                    - "n" means ascending numeric order mode
#                    - "N" means descending numeric order mode
#                    - If you want to use them with "/", it must be
#                      used the same character before and after "/".
#                      For instance, "2n/5n" is correct, but "2n/5N"
#                      and "2n/5" are wrong.
#        <master>  Text file which is a masterdata
#        <tran> .. Text file which is a transaction data
#
# Designed originally by Nobuaki Tounaka
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2020-12-06
#
# This is a public-domain software (CC0). It means that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, we are fed up with the side effects which are brought
# about by the major licenses.
#
######################################################################


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0022
export LC_ALL=C
export PATH="$(command -p getconf PATH 2>/dev/null)${PATH+:}${PATH-}"
case $PATH in :*) PATH=${PATH#?};; esac
export UNIX_STD=2003  # to make HP-UX conform to POSIX

# === Define the functions for printing usage and error message ======
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage   : ${0##*/} key=<key> <master> <tran>
	Args    : <master>  Text file which is a masterdata
	          <tran> .. Text file which is a transaction data
	Options : key ..... Keyfield number(s) by <key> which must be kept the
	                    Order even after merging
	                    * You can also use "@" and "/" characters to mean
	                      multiplicate keys.
	                      - "2@4@5" means "2nd, 4th and 5th fields should
	                        be refferred as the keys"
	                      - "2/5" means "Fields from 2nd to 5th should be
	                        refferred as the keys"
	                    * You can also use "N" or "n" character after a
	                      key number to mean numeric order mode.
	                      - "n" means ascending numeric order mode
	                      - "N" means descending numeric order mode
	                      - If you want to use them with "/", it must be
	                        used the same character before and after "/".
	                        For instance, "2n/5n" is correct, but "2n/5N"
	                        and "2n/5" are wrong.
	Version : 2020-12-06 03:17:59 JST
	          Open usp Tukubai (POSIX Bourne Shell/POSIX commands/UTF-8)
	            * Although "-s" (stable sort) supported sort command produces
	              better performance than non-supported one
	USAGE
  exit 1
}
error_exit() {
  ${2+:} false && echo "${0##*/}: $2" 1>&2
  exit $1
}

# === Define an exit trap function for delete temporary dirs =========
exit_trap() {
  set -- ${1:-} $?  # $? is set as $1 if no argument given
  trap '' EXIT HUP INT QUIT PIPE ALRM TERM
  [ -d "${Tmp:-}" ] && rm -rf "${Tmp%/*}/_${Tmp##*/_}"
  trap -  EXIT HUP INT QUIT PIPE ALRM TERM
  exit $1
}

# === Define the function for the alternative of the "mktemp -d -t" ==
# the alternative of the "mktemp -d -t"
mktempd0() {
  # --- parameters, etc. ---------------------------------------------
  num_of_digits=16  # Length of Random String
  n=10              # Max Times of Retrying
  chrs='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_'
                    # Available letters
  LF=$(printf '\\\n_');LF=${LF%_}
  # --- call built-in mktemp if exists -------------------------------
  type mktemp >/dev/null 2>&1 && {
    mktemp -d -t _${0##*/}.$$.XXXXXXXXXXXXXXXX
    return $?
  }
  # --- set the temporary directory ----------------------------------
  Dir_tmp=$(set | grep -q ^TMPDIR= | sed 's/^[^=]\{1,\}=//');
  case "$Dir_tmp" in
    '') Dir_tmp='/tmp'      ;;
    /)  Dir_tmp=''          ;;
    *)  Dir_tmp=${Dir_tmp%/};;
  esac
  # --- mktemp loop --------------------------------------------------
  while [ $n -ge 0 ]; do
    # --- Generate Ramdom string -------------------------------------
    # calculate the number of words which required
    nw=$(echo "${num_of_digits}*l(${#chrs})/11.09+1" | # 11.09=ln(65536)
         bc -l                                       |
         sed 's/\..*$//'                             )
    # make a random hexadecimal digit
    if [ -c /dev/urandom ]; then
      hstr=$(dd if=/dev/urandom bs=2 count=$nw 2>/dev/null |
             od -A n -t x2 -v                              |
             tr 'abcdef ' 'ABCDEF\n'                       |
             tr -Cd 0123456789ABCDEF                       )
    else
      hstr=$( (ps -Ao pid,etime,pcpu,vsz; date)         |
             od -t d4 -A n -v                           |
             sed 's/[^0-9]\{1,\}/'"$LF"'/g'             |
             grep '[0-9]'                               |
             tail -n 42                                 |
             sed 's/.*\(.\{8\}\)$/\1/g'                 |
             awk 'BEGIN{a=-2147483648;}                 #
                       {a+=$1;        }                 #
                  END  {                                #
                    srand(a);                           #
                    for(i=0;i<'$nw';i++){               #
                      printf("%02X",int(rand()*65536)); #
                    }                                   #
                  }'                                    )
    fi
    # make a random string from the hexadecimal digit
    s=$(echo "obase=${#chrs};ibase=16;$hstr"                     |
        bc                                                       |
        tr -d '\\\n'                                             |
        tr ' ' '\n'                                              |
        awk 'BEGIN  {for(i=1;i<'$num_of_digits';i++){print 0;}}  #
             /[0-9]/{print;                                   }' |
        awk 'BEGIN  {ORS="";                                     #
                     s="'"$chrs"'";                              #
                     for(i=0;i<length(s);i++){                   #
                       c[i]=substr(s,i+1,1);                     #
                     }                        }                  #
             /[0-9]/{print c[$0*1];           }'                 |
        tail -c $num_of_digits                                   )
    # --- Making the file path ---------------------------------------
    Path_target="${Dir_tmp}/tmp.${0##*/}.$$.$s"
    # --- Making the file --------------------------------------------
    (set -C; umask 177; : > "$Path_target") 2>/dev/null || {
      [ -f "$Path_target" ] && { n=$((n-1)); continue; }
      n=-1; break;
    }
    break
  done
  # --- print error message when failed to make a file ---------------
  case "$n" in -1) return 1;; esac
  # --- print the path of the file -----------------------------------
  printf '%s\n' "$Path_target"
  # --- return successfully ------------------------------------------
  return 0
}

# === Investigate whether sort command supports "-s" option or not ===
stablesort=0;
for CMD_SORT in sort gsort; do
  type $CMD_SORT >/dev/null 2>&1 && {
    case "$(printf '1 B\n1 A\n'             |
            "$CMD_SORT" -sk 1,1 2>/dev/null |
            head -n 1                       )" in
      '1 B') stablesort=1; break;;
    esac
  }
done
export stablesort


######################################################################
# Parse Arguments
######################################################################

# === Get the options and the filepaths ==============================
# --- initialize option parameters -----------------------------------
key=''
fldstr=''
masterfile=''
tranfile=''
#
# --- get them -------------------------------------------------------
case $# in [23]) :;; *) print_usage_and_exit;; esac
for arg in "$@"; do
  case "$arg" in
    key=*)
      key=${arg#key=}
      case "$key" in *NF*)
        error_exit 1 'Cannot use NF in the key argument'
        ;;
      esac
      ;;
    *)
      if [ -z "$masterfile" ]; then
        if [ \( -f "$arg" \) -o \( -c "$arg" \) -o \( -p "$arg" \) -o \
             \( "_$arg" = '_-' \)                                     ]; then
          masterfile=$arg
        fi
      elif [ -z "$tranfile" ]; then
        if [ \( -f "$arg" \) -o \( -c "$arg" \) -o \( -p "$arg" \) -o \
             \( "_$arg" = '_-' \)                                     ]; then
          tranfile=$arg
        fi
      else
        print_usage_and_exit
      fi
      ;;
  esac
done
case "$key"        in '') print_usage_and_exit;; esac
case "$masterfile" in '') print_usage_and_exit;; esac
case "$tranfile"   in '') tranfile='-'        ;; esac

# === Validate the masterfile and transaction file ===================
use_stdin=0
for file in "$masterfile" "$tranfile"; do
  case "$file" in
     -|/dev/stdin|/dev/fd/0|/proc/self/fd/0) use_stdin=$((use_stdin+1));;
  esac
done
case $use_stdin in [01]) :;; *) error_exit 1 'You cannot use STDIN twice';; esac
[ -r "$masterfile" ] || [ "_$masterfile" = '_-' ] || {
  error_exit 1 'Cannot open the master file'
}
[ -r "$tranfile"   ] || [ "_$tranfile"   = '_-' ] || {
  error_exit 1 'Cannot open the transaction file'
}
case "$masterfile" in ''|-|/*|./*|../*) :;; *) masterfile="./$masterfile";; esac
case "$tranfile"   in ''|-|/*|./*|../*) :;; *)   tranfile="./$tranfile"  ;; esac

# === Validate the "key" argument and make the fields ================
fldstr=$(printf '%s\n' "$key"                                         |
         tr '@' '\n'                                                  |
         awk 'BEGIN{n_shift=(ENVIRON["stablesort"]==0)?1:0;}          #
              /^[0-9]+$/{                                             #
                printf("-k %d,%d ",$0+n_shift,$0+n_shift);            #
                next;                                                 #
              }                                                       #
              /^[0-9]+[Nn]$/{                                         #
                l=length($0);                                         #
                n=substr($0,1,l-1)+n_shift;                           #
                o=substr($0,l    )  ;                                 #
                if(o=="N"){o="nr";}                                   #
                printf("-k %d%s,%d%s ",n,o,n,o);                      #
                next;                                                 #
              }                                                       #
              /^[0-9]+\/[0-9]+$/{                                     #
                p =index( $0,"/");                                    #
                l =length($0    );                                    #
                n1=substr($0,  1,  p-1)+n_shift;                      #
                n2=substr($0,p+1      )+n_shift;                      #
                if(n1<=n2){printf("-k %d,%d ",n1,n2);next;}           #
                for(i=n1;i>=n2;i--){printf("-k %d,%d ",i,i);}         #
                next;                                                 #
              }                                                       #
              /^[0-9]+[Nn]\/[0-9]+[Nn]$/{                             #
                p =index( $0,"/");                                    #
                l =length($0    );                                    #
                o1=substr($0,p-1,1);                                  #
                o2=substr($0,  l  );                                  #
                if(o1!=o2 ){print "_"; exit;}                         #
                if(o1=="N"){o="nr";}                                  #
                n1=substr($0,  1,  p-2)+n_shift;                      #
                n2=substr($0,p+1,l-p-1)+n_shift;                      #
                if(n1<=n2){printf("-k %d%s,%d%s ",n1,o,n2,o);next;}   #
                for(i=n1;i>=n2;i--){printf("-k %d%s,%d%s ",i,o,i,o);} #
                next;                                                 #
              }                                                       #
              {print "_"; exit;}'                                     )
case "$fldstr" in *_*) error_exit 1 'Invalid key option';; esac


######################################################################
# Main
######################################################################

# === (a) If "sort -s" is possible, do "up3" with it =================
case $stablesort in 0) :;; *)
  exec $CMD_SORT -bms $fldstr "$masterfile" "$tranfile"
  exit
;; esac

# === (b) If "/dev/fd/3" exists, do "up3" through it =================
([ -c /dev/fd/3 ] && [ -r /dev/fd/3 ]) 3<&0 && {
  ( (cat "$masterfile" | sed 's/^/1 /')   |        #
    ( (cat "$tranfile" | sed 's/^/2 /')   |        #
      sort -bm -k 1,1 $fldstr /dev/fd/3 - ) 3<&0 ) |
  sed 's/^..//'
  exit
}

# === (c) Otherwise, do "up3" with a named pipe ======================
trap 'exit_trap' EXIT HUP INT QUIT PIPE ALRM TERM
Tmp=`mktempd0`  || error_exit 1 'Failed to mktemp'
mkfifo "$Tmp/p" || error_exit 1 'Failed to mkfifo'
cat "$masterfile" |
sed 's/^/1 /'     > "$Tmp/p" &
cat "$tranfile"                    |
sed 's/^/2 /'                      |
sort -bm -k 1,1 $fldstr "$Tmp/p" - |
sed 's/^..//'
exit_trap
