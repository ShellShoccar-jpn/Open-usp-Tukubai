#!/bin/sh

######################################################################
#
# CJOIN2 - C-type "join2" :
#          A "join2" Command Which Can Accept A Non-sorted Transaction Textdata
#
# USAGE: cjoin2 [-d<string>] [+<string>] key=<key> <master> <tran>
#
#        key ..... Keyfield number(s) by <key> for join operation in the
#                  transaction data
#                  * You can also use "@" and "/" characters to mean
#                    multiplicate keys.
#                    - "2@4@5" means "2nd, 4th and 5th fields should
#                      be refferred as the keys"
#                    - "2/5" means "Fields from 2nd to 5th should be
#                      refferred as the keys"
#                  * In the masterdata, the 1st key is always referred.
#                    - When both key=1 and key=3, the 1st field is
#                      referred in the masterdata.
#                    - When key="2@4@5", 1st, 3rd and 4th fields are
#                      referred in the masterdata.
#        <master>  Text file which is a masterdata (joined from leftside)
#        <tran> .. Text file which is a transaction data (joined from
#                  rightside)
#        -d,+ .... Substitute string by <string>, it will be used for
#                  lines in the transaction data which can't be joined.
#                  (<string>'s default is "*")
#
# Designed originally by Nobuaki Tounaka
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2020-12-06
#
# This is a public-domain software (CC0). It means that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, we are fed up with the side effects which are brought
# about by the major licenses.
#
######################################################################


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0022
export LC_ALL=C
export PATH="$(command -p getconf PATH 2>/dev/null)${PATH+:}${PATH-}"
case $PATH in :*) PATH=${PATH#?};; esac
export UNIX_STD=2003  # to make HP-UX conform to POSIX

# === Define the functions for printing usage and error message ======
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage   : ${0##*/} [-d<string>] [+<string>] key=<key> <master> <tran>
	Args    : <master>  Text file which is a masterdata (joined from leftside)
	          <tran> .. Text file which is a transaction data (joined from
	                    rightside)
	Options : key ..... Keyfiled number(s) by <key> for join operation in the
	                    transaction data
	                    * You can also use "@" and "/" characters to mean
	                      multiplicate keys.
	                      - "2@4@5" means "2nd, 4th and 5th fields should
	                        be refferred as the keys"
	                      - "2/5" means "Fields from 2nd to 5th should be
	                        refferred as the keys"
	                    * In the masterdata, the 1st key is always referred.
	                      - When both key=1 and key=3, the 1st field is
	                        referred in the masterdata.
	                      - When key="2@4@5", 1st, 3rd and 4th fields are
	                        referred in the masterdata.
	          -d,+ .... Substitute string by <string>, it will be used for
	                    lines in the transaction data which can't be joined.
	                    (<string>'s default is "*")
	Version : 2020-12-06 23:37:47 JST
	          Open usp Tukubai (POSIX Bourne Shell/POSIX commands/UTF-8)
	USAGE
  exit 1
}
error_exit() {
  ${2+:} false && echo "${0##*/}: $2" 1>&2
  exit $1
}


######################################################################
# Parse Arguments
######################################################################

# === Get the options and the filepaths ==============================
# --- initialize option parameters -----------------------------------
key=''
dummy=''
fldstr_t=''
flds=''
masterfile=''
tranfile=''
#
# --- get them -------------------------------------------------------
case $# in [01]) print_usage_and_exit;; esac
while [ $# -gt 0 ]; do
  case $1 in -d*) dummy=${1#-d};; +*) dummy=${1#+};; *) break;; esac
  shift
done
case $1 in key=*) key=${1#key=}; shift;; *) print_usage_and_exit;; esac
case $# in                               0) print_usage_and_exit;; esac
if [ -f "$1" ] || [ -c "$1" ] || [ -p "$1" ] || [ "_$1" = '_-' ]; then
  masterfile=$1; shift
else
  error_exit 1 'Invalid masterfile'
fi
case $# in
  0) :;;
  1) if [ -f "$1" ] || [ -c "$1" ] || [ -p "$1" ] || [ "_$1" = '_-' ]; then
       tranfile=$1; shift
     else
       error_exit 1 'Invalid tranfile'
     fi
     ;;
  *) print_usage_and_exit;;
esac
case "$tranfile" in '') tranfile='-';; esac
use_stdin=0
for file in "$masterfile" "$tranfile"; do
  case "$file" in
     -|/dev/stdin|/dev/fd/0|/proc/self/fd/0) use_stdin=$((use_stdin+1));;
  esac
done
case $use_stdin in [01]) :;; *) error_exit 1 'You cannot use STDIN twice';; esac
[ -r "$masterfile" ] || [ "_$masterfile" = '_-' ] || {
  error_exit 1 'Cannot open the master file'
}
[ -r "$tranfile"   ] || [ "_$tranfile"   = '_-' ] || {
  error_exit 1 'Cannot open the transaction file'
}
case "$masterfile" in ''|-|/*|./*|../*) :;; *) masterfile="./$masterfile";; esac
case "$tranfile"   in ''|-|/*|./*|../*) :;; *)   tranfile="./$tranfile"  ;; esac


######################################################################
# Generate key reading codes for AWK
######################################################################

# --- Add a tag into the last line for validation --------------------
key_1=$(printf '%s\n' "$key"                                                 |
        tr '@' '\n'                                                          |
        awk '/[1-9][0-9][0-9][0-9][0-9]/   {err=1;  exit;                  } #
             /^0+$/                        {err=2;  exit;                  } #
             /^0+\/[^\/]+$/                {err=2;  exit;                  } #
             /^[^\/]+\/0+$/                {err=2;  exit;                  } #
             /^[0-9]+$/                    {a=1;    print;next;            } #
             /^NF(-[0-9]+)?$/              {b=1;    print;next;            } #
             /^[0-9]+\/[0-9]+$/            {a=1;    print;next;            } #
             /^NF(-[0-9]+)?\/NF(-[0-9]+)?$/{b=1;    print;next;            } #
             /^[0-9]+\/NF(-[0-9]+)?$/      {a=1;b=1;print;next;            } #
             /^NF(-[0-9]+)?\/[0-9]+$/      {a=1;b=1;print;next;            } #
                                           {err=3;  exit;                  } #
             END                           {#Tagging type# at the last       #
                                            if     (err==1){print "typeL";}  #
                                            else if(err==2){print "typeZ";}  #
                                            else if(err>=3){print "typeE";}  #
                                            else if(a+b >1){print "type3";}  #
                                            else if(a   >0){print "type1";}  #
                                            else           {print "type2";}}')

# --- Validate and making key strings for cjoin ----------------------
case "${key_1#*type}" in
  # In case of containing an invalid keys
   'L') error_exit 1 'A number in the key argument is too large';;
   'Z') error_exit 1 'Zeroth field number is contained'         ;;
   'E') error_exit 1 'Invalid key argument'                     ;;
  # In case of containing only "n" type fileds or "NF-n" type fields
  [12]) # Extract n/n key-strings and sort+uniq all key-strings
        key_2=$(echo "${key_1%?type[12]}"                                     |
                awk '/^([0-9]+|NF(-[0-9]+)?)$/{print;}                        #
                     /^[0-9]+\/[0-9]+/{                                       #
                       split($0,f,"/");                                       #
                       if (f[1]>f[2]) {i=f[2];j=f[1];} else {i=f[1];j=f[2];}  #
                       i=i*1; j=j*1;                                          #
                       for (;i<=j;i++) {printf("%04d\n",i);}                  #
                       next;                                                  #
                     }                                                        #
                     /^NF(-[0-9]+)?\/NF(-[0-9]+)?/{                           #
                       s=$0;                                                  #
                       gsub(/NF-?/,"",s);sub(/^\//,"0/",s);sub(/\/$/,"/0",s); #
                       split(s,f,"/");                                        #
                       if (f[1]>f[2]) {i=f[2];j=f[1];} else {i=f[1];j=f[2];}  #
                       i=i*1; j=j*1;                                          #
                       for(;i<=j;i++) {printf("NF-%04d\n",i);}                #
                       next;                                                  #
                     }'                                                       |
                if   [ "${key_1#*type}" -eq 1 ]; then sort -u                 #
                else                                  sort -ur; fi            |
                sed 's/0\{1,\}\([1-9][0-9]*\)/\1/g'                           )
        key_m=$(echo "$key_2"                                              |
                if   [ "${key_1#*type}" -eq 1 ]; then cat                  #
                else                                  tr -d 'NF'; fi       |
                awk 'BEGIN{ORS=" ";                                        #
                           getline fldnum;                                 #
                           n=fldnum-1;                                     #
                           print fldnum-n,"FS";                            #
                           while (getline fldnum) {print fldnum-n,"FS";}}' |
                grep ''                                                    |
                sed 's/[0-9]\{1,\}/\$&/g; s/ FS $//'                       )
        key_t=$(echo "$key_2"          |
                sed 's/NF-0\{1,\}/NF/' |
                sed '/^NF-/s/.*/(&)/'  |
                sed 's/^/$/'           |
                tr '\n' ' '            |
                grep ''                |
                sed 's/  */ FS /g'     |
                sed 's/ FS $//'        )
        maxfn_t=$(echo ${key_t##* } | tr -d '$()')
        topfn_after_key_m=$(echo ${key_m##* } | tr -d '$' | awk '{print $0+1;}')
        ;;
  # In case of containing both "n" type fields and "NF-n" fields
     3) mkfngrp_t=$(echo "${key_1%?type3}"                                    |
                    sed '/\//!s@^.*$@fngrp_t[&]="";@'                         |
                    sed '/\//s@^\(.\{1,\}\)/\(.\{1,\}\)$@addfngrp_t(\1,\2);@' |
                    tr -d '\n'                                                )
        ;;
esac

# --- Generate "utf8strlen" function code in AWK ---------------------
utf8strlen='
# --- strlen for UTF-8 (main) ----------------------------------------
function utf8strlen(str, len,i,l1,l2,l3) {
  len = 0;
  for (i = 1; i <= length(str); i++) {
    len++;
    l1=substr(str, i, 1);
    if        (l1 < "\200") {       continue;
    } else if (l1 < "\300") {len--; continue;
    } else if (l1 < "\340") {i++;
    } else if (l1 < "\360") {
      if (l1 == "\357") {
        l2 = substr(str, i+1, 1);
        if (l2 == "\275") {
          l3 = substr(str, i+2, 1);
          if ((l3 >= "\240") && (l3 < "\300")) {len--;}
        } else if (l2 == "\276") {
          l3 = substr(str, i+2, 1);
          if ((l3 >= "\200") && (l3 < "\240")) {len--;}
        }
      }
      i += 2;
    } else if (l1 < "\370") {i += 3;
    } else if (l1 < "\374") {i += 4;
    } else if (l1 < "\376") {i += 5;
    } else                  {len-- ; continue;}
    len++;
  }
  return len;
}'


######################################################################
# Main Routine A (for type 1 and 2)
######################################################################

case "${key_1#*type}" in [12])
export masterfile
export tranfile
export dummy
export cmd=${0##*/}

exec awk '
BEGIN {
  # --- Prepare ------------------------------------------------------
  OFS=""; ORS="";
  file_m=ENVIRON["masterfile"];
  file_t=ENVIRON["tranfile"  ];
  topfn_after_key_m = '$topfn_after_key_m'*1;
  dummy =ENVIRON["dummy"];

  # --- load the keys in master --------------------------------------
  valid_mst=0;
  split("",maxflen); # max length  of field[n] of all records
  while (getline < file_m) {
    if (NF>0) {valid_mst=1} else {err="No fields line in masterdata"; exit;}
    iflds = ""; # fields which will be inserted between the transaction fields
    for (i=topfn_after_key_m; i<=NF; i++) {
      iflds = iflds FS $i;
      if (dummy == "") {
        flen = utf8strlen($i);
        if ((!(i in maxflen)) || (flen > maxflen[i])) {maxflen[i] = flen;}
      }
    }
    keystr_m['"$key_m"'] = iflds;
  }
  if(valid_mst==0){err="No lines in masterdata"; exit;}
  dummy_flds = "";
  for (i=topfn_after_key_m; i<=NF; i++) {
    if (dummy != "") {s=dummy;                                          }
    else             {s=sprintf("%0" maxflen[i] "d",0); gsub(/0/,"*",s);}
    dummy_flds = dummy_flds FS s;
  }

  # --- Print the records in tran which have the same key ------------
  while (getline < file_t) {
    key_str = '"$key_t"';
    rec_str = ""; dlm = "";
    for (i=1; i<=('$maxfn_t')*1; i++) {print dlm,$i; dlm=FS;}
    if (key_str in keystr_m) {print keystr_m[key_str];}
    else                     {print dummy_flds;       }
    for (   ; i<=NF            ; i++) {print dlm,$i;        }
    print "\n";
  }

  # --- finish with no regular rules ---------------------------------
  exit;
}

END {
  if (err=="") {                                                       exit 0;}
  else         {printf("%s: %s\n",ENVIRON["cmd"],err) > "/dev/stderr"; exit 1;}
}

'"$utf8strlen"

exit;; esac


######################################################################
# Main Routine B (for type 3)
######################################################################

export masterfile
export tranfile
export dummy
export cmd=${0##*/}

exec awk '
BEGIN {
  # --- Prepare ------------------------------------------------------
  OFS=""; ORS="";
  file_m=ENVIRON["masterfile"];
  file_t=ENVIRON["tranfile"  ];
  dummy =ENVIRON["dummy"];

  if (!(getline < file_t)){exit;}
  split($0,fldstr_t1);fldstr_t1[0]=$0;nf_t1=NF;
  '$mkfngrp_t'
  maxfn_t=1; minfn_t=10000; i=0;
  for (fn in fngrp_t) {
    i++;
    fn=fn*1;
    if(fn>maxfn_t){maxfn_t=fn;}
    if(fn<minfn_t){minfn_t=fn;}
    fnlist_t[i]=fn;
  }
  num_of_fns=0;
  for (i=1; (i in fnlist_t); i++) {
    fnlist_m[i]=fnlist_t[i]-minfn_t+1;
    num_of_fns++;
  }
  topfn_after_key_m=maxfn_t-minfn_t+2;

  # --- load the keys in master --------------------------------------
  valid_mst=0;
  split("",maxflen); # max length  of field[n] of all records
  while (getline < file_m) {
    if (NF>0) {valid_mst=1} else {err="No fields line in masterdata"; exit;}
    key_str=""; # key string for comparing with transaction
    iflds  =""; # fields which will be inserted between the transaction fields
    for (i=1; i<=num_of_fns; i++) {key_str = key_str FS $(fnlist_m[i]);}
    for (i=topfn_after_key_m; i<=NF; i++) {
      iflds = iflds FS $i;
      if (dummy == "") {
        flen = utf8strlen($i);
        if ((!(i in maxflen)) || (flen > maxflen[i])) {maxflen[i] = flen;}
      }
    }
    keystr_m[substr(key_str,2)] = iflds;
  }
  if(valid_mst==0){err="No lines in masterdata"; exit;}
  dummy_flds = "";
  for (i=topfn_after_key_m; i<=NF; i++) {
    if (dummy != "") {s=dummy;                                          }
    else             {s=sprintf("%0" maxflen[i] "d",0); gsub(/0/,"*",s);}
    dummy_flds = dummy_flds FS s;
  }

  # --- Print the records in tran which have the same key ------------
  if (1) {
    key_str="";
    for (i=1; i<=num_of_fns; i++) {key_str = key_str FS fldstr_t1[fnlist_t[i]];}
    key_str=substr(key_str,2);
    rec_str = ""; dlm = "";
    for (i=1; i<=maxfn_t; i++) {print dlm,fldstr_t1[i]; dlm=FS;}
    if (key_str in keystr_m) {print keystr_m[key_str];}
    else                     {print dummy_flds;       }
    for (   ; i<=nf_t1  ; i++) {print dlm,fldstr_t1[i];        }
    print "\n";
  }
  while (getline < file_t) {
    key_str="";
    for (i=1; i<=num_of_fns; i++) {key_str = key_str FS $(fnlist_t[i]);}
    key_str=substr(key_str,2);
    rec_str = ""; dlm = "";
    for (i=1; i<=maxfn_t; i++) {print dlm,$i; dlm=FS;}
    if (key_str in keystr_m) {print keystr_m[key_str];}
    else                     {print dummy_flds;       }
    for (   ; i<=NF     ; i++) {print dlm,$i;        }
    print "\n";
  }

  # --- finish with no regular rules ---------------------------------
  exit;
}

END {
  if (err=="") {                                                    exit 0;}
  else         {printf("%s: %s\n",ENVIRON["cmd"],err) | "cat 1>&2"; exit 1;}
}

function addfngrp_t(fr,to ,i) {
  if (fr<=to) {for (i=fr; i<=to; i++) {fngrp_t[i]="";}}
  else        {for (i=fr; i>=to; i--) {fngrp_t[i]="";}}
}

'"$utf8strlen"

exit
